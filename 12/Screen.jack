// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen, powersOfTwo;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i, mask;

        let screen = 16384;
        let color = true;

        let powersOfTwo = Array.new(16);
        let i = 0;
        let mask = 1;

        while (i < 16) {
            let powersOfTwo[i] = mask;
            let i = i + 1;
            let mask = mask + mask;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;

        while (i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;

        let address = 32 * y + (x / 16);
        let mask = powersOfTwo[x & 15];

        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, xDir, yDir, i, a, b, diff;

        let dx = x2 - x1;
        let dy = y2 - y1;
        let i = 0;
        
        if (dx > 0) { let xDir = 1; } 
        else { let xDir = -1; }

        if (dy > 0) { let yDir = 1; }
        else { let yDir = -1; }

        // horizontal line
        if (dy = 0) {
            while (~(i = dx)) {
                do Screen.drawPixel(x1 + i, y1);
                let i = i + xDir;
            }
            return;
        } else {
            // vertical line
            if (dx = 0) {
                while (~(i = dy)) {
                    do Screen.drawPixel(x1, y1 + i);
                    let i = i + yDir;
                }
                return;
            }
        }

        // diagnol
        let a = 0;
        let b = 0;
        let diff = 0;

        while (~(dx = a) & ~(dy = b)) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (diff < 0) { 
                let a = a + xDir;
                let diff = diff + Math.abs(dy);
            } else { 
                let b = b + yDir;
                let diff = diff - Math.abs(dx);
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rSquared;

        let dy = -r;
        let rSquared = r * r;

        while (~(dy > r)) {
            let dx = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
